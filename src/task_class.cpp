#include <iostream>
#include <fstream>
#include <string>
#include <ctime>
#include <thread>
#include <atomic>
#include <chrono>

#include "../headers/menu_class.h"

using std::cout;
using std::endl;

// –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ (—Ç–æ—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è,
// –∏–º—è —Å–æ–±—ã—Ç–∏—è, –Ω–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –æ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ)

class Task
{
    private:
        // —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20 –∏–ª–∏ 18) –Ω–∞—á–∞–ª–∞ –∏ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–æ–π –∫–æ–Ω–µ—Ü
        unsigned start_end_month[2];
        unsigned start_end_day[2];
        unsigned start_end_hour[2];
        unsigned start_end_minute[2];
        unsigned start_end_seconds[2];
        unsigned all_time_work_minutes;

        unsigned totalTime; // —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö) –ø—Ä–æ—à–ª–æ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        std::string name_task;
        bool isDone {false}; // –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞ –∏–ª–∏ –Ω–µ—Ç

        unsigned day_task, month_task, year_task_YYYY; // –¥–∞—Ç–∞ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞

        std::atomic<unsigned> workSeconds {};
        std::atomic<unsigned> workMinutes {};

        std::atomic<unsigned> pausedSeconds {};
        std::atomic<unsigned> pausedMinutes {};

        // Bool
        std::atomic<bool> stop_work {false};
        std::atomic<bool> pause_work {false};

        // –§—É–Ω–∫—Ü–∏–∏

        // –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–∞—É–∑—É —Ç–∞–π–º–µ—Ä–∞
        void pause_work_func()
        {
            pause_work.exchange(true); // –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ true
        }
        void unpause_work_func()
        {
            pause_work.exchange(false); // –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ false
        }
        void work_isdone()
        {
            isDone = true;
        }


        // –ú–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        const static unsigned count_point_pause_and_stop_menu {3};
        std::string pause_and_stop_menu_point[count_point_pause_and_stop_menu] {
            "\t–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
            "\t–í—ã–π—Ç–∏ –∏–∑ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É",
            "\t–í—ã–π—Ç–∏ –∏–∑ –∑–∞–¥–∞—á–∏ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞–¥–∞—á—É"
        };
        Menu pause_and_stop_menu_timer {pause_and_stop_menu_point, count_point_pause_and_stop_menu};

        // –ú–µ–Ω—é –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –≤ –ø–∞—É–∑–µ
        const static unsigned count_pause_menu_point {2};
        std::string pause_points[count_pause_menu_point] {
            "\t–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            "\t–ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"
        };
        Menu pause_timer {pause_points, count_pause_menu_point};

        static int time(Task* object)
        {
            while(true)
            {
                // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                system("clear");
                cout << "\t–ò–º—è –∑–∞–¥–∞—á–∏: " << object->name_task << endl;
                cout << "\t–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–∂–µ: " << object -> workMinutes << " –º–∏–Ω—É—Ç " << object -> workSeconds << " —Å–µ–∫—É–Ω–¥ " << endl;
                
                // object -> pause_timer.show();

                // –ü—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 1 –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                std::this_thread::sleep_for(std::chrono::seconds(1));

                // –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã
                if (object->stop_work == true)
                {
                    return 0;
                    object->endTime();
                }

                // –µ—Å–ª–∏ –Ω–∞—É—Å—Ç—É–ø–∏–ª–∞ –ø–∞—É–∑–∞
                while (object -> pause_work == true)
                {
                    system("clear");
                    cout << "–í—ã –Ω–∞ –ø–∞—É–∑–µ —É–∂–µ: " << object->pausedMinutes << " –º–∏–Ω—É—Ç " << object->pausedSeconds << " —Å–µ–∫—É–Ω–¥" << endl;
                    
                    //object -> pause_timer.show();

                    std::this_thread::sleep_for(std::chrono::seconds(1));

                    if (object->workSeconds >= 59)
                    {
                        object -> pausedMinutes.fetch_add(1);
                        object -> pausedSeconds.exchange(0);
                    } else
                    {
                        object -> pausedSeconds.fetch_add(1);
                    }
                }

                if (object->workSeconds >= 59)
                {
                    object -> workMinutes.fetch_add(1);
                    object -> workSeconds.exchange(0);
                } else
                {
                    object -> workSeconds.fetch_add(1);
                }
            }

            return 0;
        }
    public:
        Task(std::string name_task = "None name", unsigned day_task = 0, unsigned month_task = 12, unsigned year_task_YYYY = 0)
        {
            // –ø—Ä–∏—Å–≤–∞–∏–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞–µ–Ω–∏—è –ø–æ–ª—è–º
            this -> name_task = name_task;
            this -> day_task = day_task;
            this -> month_task = month_task;
            this -> year_task_YYYY = year_task_YYYY;
        }

        void startTime()
        {
            std::thread time_th (time, this);
            time_th.detach();
            std::string noneText {"test"};

            std::getline(std::cin, noneText); // –æ–∂–∏–¥–∞–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç Enter
            stop_work = true;
        }
        void endTime()
        {
            stop_work = false;
            cout << "–†–∞–±–æ—Ç–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞" << endl;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è N –¥–Ω–µ–π –∫ –¥–∞—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ (–Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –æ–Ω–∞ –∑–∞–ø–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞)
        void changeDateToNNext()
        {
            // —Å–¥–µ–ª–∞—Ç—å
        }

        void printInfoTask()
        {
            cout << "üë§\t–ò–º—è –∑–∞–¥–∞—á–∏: " << name_task << endl;
            cout << "üóìÔ∏è\t–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É: " << day_task << "/" << month_task << year_task_YYYY << endl;
            cout << "‚úÖ\t–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ —ç—Ç—É –∑–∞–¥–∞—á—É: " << workMinutes << " –º–∏–Ω—É—Ç " << workSeconds << " —Å–µ–∫—É–Ω–¥ " << endl;
        }
};

int main()
{
    Task test_task("–¢–µ—Å—Ç–æ–≤–æ–µ", 1, 10, 2025);
    std::string test {};

    test_task.startTime();
    std::getline(std::cin, test);

    test_task.printInfoTask();
}