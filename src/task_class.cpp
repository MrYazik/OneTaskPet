#include <iostream>
#include <fstream>
#include <string>
#include <ctime>
#include <thread>
#include <atomic>
#include <chrono>
#include <fstream>

#include "../headers/menu_class.h"

using std::cout;
using std::endl;

// –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ (—Ç–æ—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è,
// –∏–º—è —Å–æ–±—ã—Ç–∏—è, –Ω–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –æ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ)
class Task
{
    private:
        std::string name_task; // –∏–º—è –∑–∞–¥–∞—á–∏
        bool isDone {false}; // –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞ –∏–ª–∏ –Ω–µ—Ç
        unsigned day_task {0}, month_task {0}, year_task_YYYY {0}; // –¥–∞—Ç–∞ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞

        std::atomic<unsigned> totalWorkSeconds {};
        std::atomic<unsigned> totalWorkMinutes {};

        std::atomic<unsigned> workSeconds {};
        std::atomic<unsigned> workMinutes {};

        bool stopWorkNotDown {false};
        bool stopWork {false}; // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–ª–∞—Å—Å–∞

        std::atomic<unsigned> totalPausedSeconds {};
        std::atomic<unsigned> totalPausedMinutes {};

        std::atomic<unsigned> pausedSeconds {};
        std::atomic<unsigned> pausedMinutes {};

        // Bool
        std::atomic<bool> pause_work {false};

        // –§—É–Ω–∫—Ü–∏–∏

        // –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–∞—É–∑—É —Ç–∞–π–º–µ—Ä–∞
        void pause_work_func()
        {
            pause_work.exchange(true); // –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ true
        }
        void unpause_work_func()
        {
            pause_work.exchange(false); // –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ false
        }
        // –í—ã—Ö–æ–¥ —Å –æ—Ç–º–µ—á–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
        void work_isdone()
        {
            isDone = true;
            stopWork = true;
        }

        // –í—ã—Ö–æ–¥ –∏–∑ –∑–∞–¥–∞—á–∏, –Ω–µ –æ—Ç–º–µ—á–∞—è, —á—Ç–æ –µ—ë –≤—ã–ø–æ–ª–Ω–∏–ª
        void exit_work_not_down()
        {
            stopWorkNotDown = true;
        };

        // –ú–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        std::string pause_and_stop_menu_point[3] {
            "\t–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
            "\t–í—ã–π—Ç–∏ –∏–∑ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É",
            "\t–í—ã–π—Ç–∏ –∏–∑ –∑–∞–¥–∞—á–∏ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞–¥–∞—á—É",
        };
        Menu pause_and_stop_menu_timer {pause_and_stop_menu_point, static_cast<unsigned>(std::size(pause_and_stop_menu_point))};

        // –ú–µ–Ω—é –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –≤ –ø–∞—É–∑–µ
        std::string pause_points[2] {
            "\t–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            "\t–ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"
        };
        Menu pause_timer {pause_points, static_cast<unsigned>(std::size(pause_points))};

        static int time(Task* object)
        {
            while(true)
            {
                // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                system("clear");
                cout << "–ò–º—è –∑–∞–¥–∞—á–∏: " << object->name_task << endl;
                cout << "–í —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–∂–µ: " << object -> workMinutes << " –º–∏–Ω—É—Ç " << object -> workSeconds << " —Å–µ–∫—É–Ω–¥ " << endl;
                cout << "–°—É–º–∞—Ä–Ω–æ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–∂–µ: " << object -> totalWorkMinutes << " –º–∏–Ω—É—Ç " << object -> totalWorkSeconds << " —Å–µ–∫—É–Ω–¥ " << endl;

                object->pause_and_stop_menu_timer.show();

                // –ü—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 1 –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                std::this_thread::sleep_for(std::chrono::seconds(1));

                // –µ—Å–ª–∏ –Ω–∞—É—Å—Ç—É–ø–∏–ª–∞ –ø–∞—É–∑–∞
                while (object -> pause_work == true)
                {
                    system("clear");
                    cout << "–ù–∞ —Ç–µ–∫—É—â–µ–π –ø–∞—É–∑–µ –≤—ã —É–∂–µ: " << object->pausedMinutes << " –º–∏–Ω—É—Ç " << object->pausedSeconds << " —Å–µ–∫—É–Ω–¥" << endl;
                    cout << "–°—É–º–º–∞—Ä–Ω–æ –≤—ã –Ω–∞ –ø–∞—É–∑–µ —É–∂–µ: " << object->totalPausedMinutes << " –º–∏–Ω—É—Ç " << object->totalPausedSeconds << " —Å–µ–∫—É–Ω–¥" << endl;
                    
                    object -> pause_timer.show();

                    std::this_thread::sleep_for(std::chrono::seconds(1));

                    if (object-> pausedSeconds >= 59)
                    {
                        // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
                        object -> totalPausedMinutes.fetch_add(1);
                        object -> totalPausedSeconds.exchange(0);

                        // –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å–∏–∏ –ø–∞—É–∑—ã
                        object -> pausedMinutes.fetch_add(1);
                        object -> pausedSeconds.exchange(0);
                    } else
                    {
                        // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
                        object -> totalPausedSeconds.fetch_add(1);

                        // –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å–∏–∏ –ø–∞—É–∑—ã
                        object -> pausedSeconds.fetch_add(1);
                    }

                    // –û–±–Ω—É–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã 
                    object -> workMinutes.exchange(0);
                    object -> workSeconds.exchange(0);
                }

                // –û–±–Ω—É–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –ø–∞—É–∑—ã
                object -> pausedMinutes.exchange(0);
                object -> pausedSeconds.exchange(0);

                if (object->workSeconds >= 59)
                {
                    object -> totalWorkMinutes.fetch_add(1);
                    object -> totalWorkSeconds.exchange(0);

                    object -> workMinutes.fetch_add(1);
                    object -> workSeconds.exchange(0);
                } else
                {
                    object -> totalWorkSeconds.fetch_add(1);

                    object -> workSeconds.fetch_add(1);
                }

                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º 
                if (object -> isDone == true)
                {

                    return 0;
                }

                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –±–µ–∑ –æ—Ç–º–µ—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
                if (object -> stopWorkNotDown == true)
                {
                    return 0;
                }
            }

            return 0;
        }
    public:
        Task() 
        {

        }

        void startTime()
        {
            std::string select_point {};
            bool stop_request_input {false};

            std::thread time_th (time, this);
            time_th.detach(); // –ó–∞–ø—É—Å–∫–µ–º —Ç–∞–π–º–µ—Ä

            // –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–µ–Ω—é—à–∫–∞—Ö
            while (stopWork == false)
            {
                while (stop_request_input == false && stopWork == false)
                {
                    // –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞
                    std::getline(std::cin, select_point);

                    if (select_point == "1") {
                        pause_work_func();
                        stop_request_input = true; // –í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É–∑–µ–π –º–µ–Ω—é—à–∫–∏
                    }
                    else if (select_point == "2") {
                        work_isdone();
                        stopWork = true;
                    }
                    else if (select_point == "3") {
                        exit_work_not_down();
                        stopWork = true;
                    }
                    else {
                        cout << "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é." << endl;
                    }
                }

                stop_request_input = false;

                // –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–µ–Ω—é –ø–∞—É–∑—ã
                while (pause_work == true && stopWork == false)
                {
                    // –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞
                    std::getline(std::cin, select_point);

                    if (select_point == "1")
                    {
                        unpause_work_func();
                    } else if (select_point == "2")
                    {
                        work_isdone();
                    } else
                    {
                        cout << "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é." << endl;
                    }
                }

                pause_work.exchange(false);
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è N –¥–Ω–µ–π –∫ –¥–∞—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ (–Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –æ–Ω–∞ –∑–∞–ø–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞)
        void changeDateToNNext()
        {
            // —Å–¥–µ–ª–∞—Ç—å
        }

        void printInfoTask()
        {
            cout << "üë§\t–ò–º—è –∑–∞–¥–∞—á–∏: " << name_task << endl;
            cout << "üóìÔ∏è\t–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É: " << day_task << "/" << month_task << "/" << year_task_YYYY << endl;
            cout << "‚úÖ\t–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ —ç—Ç—É –∑–∞–¥–∞—á—É: " << totalWorkMinutes << " –º–∏–Ω—É—Ç " << totalWorkSeconds << " —Å–µ–∫—É–Ω–¥ " << endl;
            cout << "üì≥\t–û—Ç–¥—ã—Ö–∞–µ—Ç–µ –≤—ã: " << totalPausedMinutes << " –º–∏–Ω—É—Ç " << totalPausedSeconds << " —Å–µ–∫—É–Ω–¥" << endl;
        }

        void installTasks()
        {
            bool stop_current_input {false}; // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            std::string yesOrNo {""}; // –í–≤–æ–¥ –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            bool error {false}; // –û—à–∏–±–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è –∑–∞–¥–∞—á–∏
            std::string errorText {""}; // –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–µ–ª –æ—à–∏–±–∫—É

            // –º–µ–Ω—é –º–µ—Å—è—Ü–µ–≤
            std::string point_select_month[12] {
                "–Ø–Ω–≤–∞—Ä—å",
                "–§–µ–≤—Ä–∞–ª—å",
                "–ú–∞—Ä—Ç",
                "–ê–ø—Ä–µ–ª—å",
                "–ú–∞–π",
                "–ò—é–Ω—å",
                "–ò—é–ª—å",
                "–ê–≤–≥—É—Å—Ç",
                "–°–µ–Ω—Ç—è–±—Ä—å",
                "–û–∫—Ç—è–±—Ä—å",
                "–ù–æ—è–±—Ä—å",
                "–î–µ–∫–∞–±—Ä—å"
            };

            Menu select_month {point_select_month, std::size(point_select_month)};

            // –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            std::time_t current_time = std::time(nullptr);


            // –ù–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
            while (stop_current_input == false)
            {
                // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Å–æ–ª—å
                system("clear");

                bool confirmName {false};

                cout << "üñäÔ∏è  –ù–∞–∑–æ–≤–∏—Ç–µ –∑–∞–¥–∞—á—É: ";
                std::getline(std::cin, name_task);

                system("clear");

                cout << "üë§  –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: " << name_task << "\t–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å: (Y/n): ";
                std::getline(std::cin, yesOrNo);

                bool yes {
                    yesOrNo == "Y" ||
                    yesOrNo == "y" ||
                    yesOrNo == "–î" ||
                    yesOrNo == "–¥"
                };

                cout << endl;

                if (yes)
                {
                    system("clear");

                    cout << "üë§ –í–∞—à–µ –∏–º—è –∑–∞–¥–∞—á–∏: " <<
                    name_task << endl;

                    stop_current_input = true; // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ while
                }
            }

            stop_current_input = false;

            // –ó–∞–¥–∞—ë–º –¥–µ–Ω—å
            while (stop_current_input == false)
            {
                system("clear");

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ü–∏–∫–ª–µ
                if (error == true)
                {
                    cout << """\033[31m–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞\033[0m: """ << errorText << """\
                        –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –æ—Ç 1 –¥–æ 31""" << endl;
                    error = false;
                }

                std::string dayMonth {};
                cout << "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01): ";
                std::getline(std::cin, dayMonth);

                try
                {
                    std::tm* local_time = std::localtime(&current_time);

                    if (std::stoi(dayMonth) <= 31 && std::stoi(dayMonth) > 0)
                    {
                        day_task = std::stoi(dayMonth);
                        stop_current_input = true;
                    } else
                    {
                        error = true;
                        errorText = dayMonth;
                    }
                } catch (...)
                {
                    error = true;
                    errorText = dayMonth;
                }
            }

            stop_current_input = false;
            
            // –ó–∞–¥–∞—ë–º –º–µ—Å—è—Ü
            while (stop_current_input == false)
            {
                system("clear");

                if (error == true)
                {
                    cout << "\033[31m–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞: \033[0m  " << errorText << 
                        "  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –æ—Ç 1 –¥–æ 12: " << endl;
                    error = false;
                }

                std::string select_month_input {""};

                select_month.show();

                cout << "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É: ";
                std::getline(std::cin, select_month_input);
            
                try 
                {
                    if (std::stoi(select_month_input) > 0 && std::stoi(select_month_input) <= 12)
                    {
                        month_task = std::stoi(select_month_input);
                        stop_current_input = true;
                    } else
                    {
                        error = true;
                        errorText = select_month_input;
                    }
                } catch (...)
                {
                    error = true;
                    errorText = select_month_input;
                }
            }

            stop_current_input = false;

            // –í—ã–±–æ—Ä –≥–æ–¥–∞
            while (stop_current_input == false)
            {
                system("clear");

                if (error == true)
                {
                    cout << """\033[31m–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ–¥\033[0m: """ << errorText << """\
                        –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –æ—Ç 1 –¥–æ 31""" << endl;
                    error = false;
                }

                std::string year_input;
                std::tm* local_time = std::localtime(&current_time);

                cout << "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É: ";
                std::getline(std::cin, year_input);

                try {
                    if (std::stoi(year_input) >= local_time->tm_year + 1900)
                    {
                        year_task_YYYY = std::stoi(year_input);
                        stop_current_input = true;
                    } else
                    {
                        error = true;
                        errorText = year_input;
                    }
                } catch (...)
                {
                    error = true;
                    errorText = year_input;
                }
            }

            stop_current_input = false;

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
            while (stop_current_input == false)
            {
                try {
                    std::ofstream task_file {"tasks.json", std::ios::app};

                    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    

                    task_file << "task: " << endl;
                    task_file << "\t name: " << name_task << endl;
                    task_file << "\t completed: " << isDone << endl;
                    task_file << "\t date create: " << endl;
                } catch (...)
                {
                    std::string getExit {};

                    cout << "–§–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç –≤ –∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –∑–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –∏ Enter" << endl;
                    std::getline(std::cin, getExit);
                }
            }
        }
};

int main()
{
    Task test_task;
    std::string test {};

    test_task.installTasks();
}